// Adding image upload to React

// Where do we store images?

// 1. - in DB - a lot of space, expensive 15$ per GB :<
// 2. - hard drive attached to server - does not work well with horizontal scaling
// 3. - outside data store - running in the cloud - very cheap 0.023$ per GB

// Casual approach
// Take file from frontend to backend, store in temp storage and pass to Amazon data store

// Scalable approach
// Client tells server it needs to upload a file to store. Includes file name and file type.
// Server asks store for a presigned URL (tailored for requested file).
// Store gives server a presigned URL.
// Server sends URL to client.
// Client uploads image file directly to store.
// React client tells server the upload was successful. Server saves URL of that new image with the blog post.

// We will use AWS S3

// AWS generate URL, which has domain, file name, access key, file type, expires time, signature.
// User can upload only single, specific file, cannot fake URL. 
// URL expires and works only for specific S3 bucket.

// Using IAM (Identity and Access Management) to autheticate AWS S3.

// IAM has Policy and User record.
// Policy describe what sth can do
// User get assigned policies

// Getting AWS S3 id and secret key!
// Instaliing aws-sdk

// AWS SDK for JavaScript -> S3 -> getSignedUrl(operation, params, callback)
// https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html

// Param 'operation' will be string command: 'putObject'
// Params - bucket, key (name of the file), contentType (image in our case)

// We need to provide unique files names!
// Organize structure in folders.

// Modyfing React app to get presigned URL, and next send PUT request with attached with file
// There is a problem with CORS - making request to different domain
// Some malicious dev, can grab presigned URL, and make request from his service, if CORS are enable for everyone :(

// Resolving CORS
// 1. Make sure that bucket name is correct
// 2. Creating CORS rules on AWS

// Resolving 400 status
// 1. Add region key s3 config instance!

// Access to cloud content
// Users are allowed to see pictures, which uploaded to blog.
// Need to disable permission option: https://stackoverflow.com/a/53497106

// Have to generate and paste AWS policy.

// Need to disable second permission option (Permissions/Block public access).
