//node has V8 engine and libuv under the hood
//V8 is Google engine invented to write JS without browser
//libuv is necessary to user system resources like network or files
//libuv is completly written in C++
//V8 is in 70% written in C++
//Node is container whitch allows us to write code in JS

//example of pbkdf2 function (internal crypto module)
//after bunch of if-checks code binds PBKDF2 function from C++ site
//C++ uses V8 engine, gives Node easy access to underlying operation system and export functions to JS site

//OS Scheduler decides which thread should be processed
//more cores -> mutlithreading
//detected thread pause -> switch between threads

//node event loop is single threaded
//some of node framework/ std lib can be not single threaded!!!

//by default libuv uses 4 threads
//mutlithreading technology in cpu allows to handle few threads in one time (depends on CPU)

//number-of-used-threads/number-of-cores= time per operation
//fs functions use threadpool
//pendingOperations tasks are running in the threadpool
//we can write custom JS code that uses the threadpool


//libuv delegates to OS making http requests and waits for confirmation
//OS by itsself manages threads used to http request (OS decides when to make request and generally how to handle all process of making requests)

//async and network stuff means pendingOSTasks in node event loop


//multitask
//https is out of the threadpool! as soon as we get response, we get console.log

//fs module, first need to gets some stats on the file (requires HD access)
//when HD accessed, stats returned, node requests to read the file
//when HD accessed, file contents streamed back to app
//node returns file contents to us

//during accessing stats, thread which is responsible for fs module,
// knows that accessing may take a some time, so it leaves fs module, and look for other tasks to do

//if any task is available (4th hashing functions), it perform it

//all threads are busy - first which end with hashing, look for other tasks to do
//it finds fs task ready to continue, because hdd accessing is done now (node got 'stats' from hdd)

//that's why we get:
//Hash: 69 ms
//FS: 72 ms
//Hash: 74 ms
//Hash: 75 ms
//Hash: 76 ms
//Request: 331 ms
